<layout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools">

    <!-- Data to make available to the XML via data binding. In this case,
         the whole ViewModel, so that we can access the LiveData,
         click handlers, and state variables. -->
    <data>

        <variable
            name="viewModel"
            type="com.caseytmorris.orroifttt.switchcontrol.SwitchControlViewModel" />
    </data>

    <!-- Start of the visible fragment layout using ConstraintLayout -->
    <androidx.coordinatorlayout.widget.CoordinatorLayout
        android:layout_width="match_parent"
        android:layout_height="match_parent" >

        <androidx.core.widget.NestedScrollView
            android:layout_height="match_parent"
            android:layout_width="match_parent">

            <androidx.constraintlayout.widget.ConstraintLayout
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:paddingBottom="16dp"
                android:clipToPadding="true"
                tools:context=".switchcontrol.SwitchControlFragment">

                <androidx.recyclerview.widget.RecyclerView
                    android:id="@+id/room_list"
                    android:layout_width="0dp"
                    android:layout_height="wrap_content"
                    android:layout_marginTop="16dp"
                    app:layoutManager="androidx.recyclerview.widget.LinearLayoutManager"
                    app:layout_constraintBottom_toTopOf="parent"
                    app:layout_constraintEnd_toEndOf="parent"
                    app:layout_constraintStart_toStartOf="parent"
                    app:layout_constraintTop_toBottomOf="@+id/control_fragment_header"
                    app:layout_constraintVertical_bias="0.0"
                    tools:listitem="@layout/list_item_room_control"/>

                <!-- With data binding and LiveData, we can track the buttons' visibility states
                     from the ViewModel. The click handler is in the ViewModel as well, and
                     you can set it for the Views using this lambda pattern. -->

                <TextView
                    android:id="@+id/control_fragment_header"
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:layout_marginStart="16dp"
                    android:layout_marginTop="8dp"
                    android:layout_marginEnd="16dp"
                    android:text="@string/controls_list_header_text"
                    android:textAlignment="center"
                    android:textSize="32sp"
                    android:textStyle="bold"
                    app:layout_constraintEnd_toEndOf="parent"
                    app:layout_constraintStart_toStartOf="parent"
                    app:layout_constraintTop_toTopOf="parent"
                    tools:text="Smart Lighting Room Controls" />

            </androidx.constraintlayout.widget.ConstraintLayout>
    </androidx.core.widget.NestedScrollView>

        <com.google.android.material.floatingactionbutton.FloatingActionButton
            android:id="@+id/button_add_room"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_gravity="end|bottom"
            android:layout_margin="16dp"
            app:srcCompat="@drawable/ic_plus_24px" />

    </androidx.coordinatorlayout.widget.CoordinatorLayout>
</layout>